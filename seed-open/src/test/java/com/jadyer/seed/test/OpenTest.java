package com.jadyer.seed.test;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.TypeReference;
import com.jadyer.seed.comm.constant.SeedConstants;
import com.jadyer.seed.comm.util.CodecUtil;
import com.jadyer.seed.comm.util.HTTPUtil;
import org.apache.commons.io.FileUtils;
import org.apache.commons.lang3.RandomStringUtils;
import org.apache.commons.lang3.time.DateFormatUtils;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Created by 玄玉<https://jadyer.cn/> on 2016/5/10 20:18.
 */
public class OpenTest {
    @Test
    public void common(){
        System.out.println("This is open test");
        Map<String, String> dataMap01 = new HashMap<>();
        dataMap01.put("partnerApplyNo", RandomStringUtils.randomNumeric(16));
        dataMap01.put("applyNo", RandomStringUtils.randomNumeric(16));
        dataMap01.put("applyStatus", "A");
        Map<String, String> dataMap02 = new HashMap<>();
        dataMap02.put("partnerApplyNo", RandomStringUtils.randomNumeric(16));
        dataMap02.put("applyNo", RandomStringUtils.randomNumeric(16));
        dataMap02.put("applyStatus", "A");
        dataMap02.put("applyRemark", "congratulations");
        List<Map<String, String>> dataList = new ArrayList<>();
        dataList.add(dataMap01);
        dataList.add(dataMap02);
        System.out.println(JSON.toJSONString(dataList));
    }


    /**
     * 接口文档访问页参数生成
     */
    @Test
    public void apidocH5Test(){
        //入参
        String appid = "870";
        String appsecret = "Xy0KEVSWmfl97J4wLKZJwg";
        String reqURL = "http://127.0.0.1/open/router/rest/h5";
        //调用
        Map<String, String> dataMap = new HashMap<>();
        dataMap.put("method", SeedConstants.OPEN_METHOD_boot_apidoc_h5);
        Map<String, String> paramMap = new HashMap<>();
        paramMap.put("appid", appid);
        paramMap.put("version", SeedConstants.OPEN_VERSION_21);
        paramMap.put("method", SeedConstants.OPEN_METHOD_boot_apidoc_h5);
        paramMap.put("data", CodecUtil.aesEncrypt(JSON.toJSONString(dataMap), appsecret));
        paramMap.put("timestamp", DateFormatUtils.format(new Date(), "yyyy-MM-dd HH:mm:ss"));
        //拼参数
        StringBuilder sb = new StringBuilder(reqURL).append("?");
        for(Map.Entry<String, String> entry : paramMap.entrySet()){
            sb.append(entry.getKey()).append("=").append(entry.getValue()).append("&");
        }
        sb.deleteCharAt(sb.length()-1);
        System.out.println(sb.toString());
    }


    /**
     * 申请单协议接口
     */
    @Test
    public void loanAgree(){
        //入参
        String appid = "870";
        String appsecret = "Xy0KEVSWmfl97J4wLKZJwg";
        String type = "1";
        String applyNo = RandomStringUtils.randomNumeric(16);
        String reqURL = "http://127.0.0.1/open/router/rest";
        //调用
        Map<String, String> dataMap = new HashMap<>();
        dataMap.put("type", type);
        dataMap.put("applyNo", applyNo);
        Map<String, String> paramMap = new HashMap<>();
        paramMap.put("appid", appid);
        paramMap.put("version", SeedConstants.OPEN_VERSION_21);
        paramMap.put("method", SeedConstants.OPEN_METHOD_boot_loan_agree);
        paramMap.put("timestamp", DateFormatUtils.format(new Date(), "yyyy-MM-dd HH:mm:ss"));
        paramMap.put("data", CodecUtil.aesEncrypt(JSON.toJSONString(dataMap), appsecret));
        String respData = HTTPUtil.post(reqURL, JSON.toJSONString(paramMap), "application/json; charset=UTF-8");
        System.out.println("得到合同协议-->" + respData);
    }


    /**
     * 文件上传接口测试
     */
    @Test
    public void fileuploadTest() throws IOException {
        //入参
        String appid = "670";
        String appsecret = "cPs6euPuvtsru2I3vmYb2Q";
        String partnerApplyNo = RandomStringUtils.randomNumeric(16);
        String filepath = "D:\\JavaSE\\Picture\\Wallpaper\\观海云远.jpg";
        String reqURL = "http://127.0.0.1/open/router/rest";
        //调用
        Map<String, String> dataMap = new HashMap<>();
        dataMap.put("partnerApplyNo", partnerApplyNo);
        Map<String, String> paramMap = new HashMap<>();
        paramMap.put("appid", appid);
        paramMap.put("version", SeedConstants.OPEN_VERSION_21);
        paramMap.put("method", SeedConstants.OPEN_METHOD_boot_file_upload);
        paramMap.put("timestamp", DateFormatUtils.format(new Date(), "yyyy-MM-dd HH:mm:ss"));
        paramMap.put("data", CodecUtil.aesEncrypt(JSON.toJSONString(dataMap), appsecret));
        HTTPUtil.upload(reqURL, "观海云远.jpg", FileUtils.openInputStream(new File(filepath)), "fileData", paramMap);
    }


    /**
     * 申请单查询接口
     */
    @Test
    public void loanGetViaAES(){
        //入参
        String appid = "770";
        String appsecret = "PDlTxZ8Vql5Y8owPSU6hzw";
        String applyNo = RandomStringUtils.randomNumeric(16);
        String partnerApplyNo = RandomStringUtils.randomNumeric(16);
        String reqURL = "http://127.0.0.1/open/router/rest";
        //调用
        Map<String, String> dataMap = new HashMap<>();
        dataMap.put("applyNo", applyNo);
        dataMap.put("partnerApplyNo", partnerApplyNo);
        Map<String, String> paramMap = new HashMap<>();
        paramMap.put("appid", appid);
        paramMap.put("version", SeedConstants.OPEN_VERSION_21);
        paramMap.put("method", SeedConstants.OPEN_METHOD_boot_loan_get);
        paramMap.put("timestamp", DateFormatUtils.format(new Date(), "yyyy-MM-dd HH:mm:ss"));
        paramMap.put("data", CodecUtil.aesEncrypt(JSON.toJSONString(dataMap), appsecret));
        String respData = HTTPUtil.post(reqURL, JSON.toJSONString(paramMap), "application/json; charset=UTF-8");
        Map<String, String> respMap = JSON.parseObject(respData, new TypeReference<Map<String, String>>(){});
        if("0".equals(respMap.get("code"))){
            System.out.println("解密后的明文为-->" + CodecUtil.aesDecrypt(respMap.get("data"), appsecret));
        }
    }


    /**
     * 申请单查询接口
     */
    @Test
    public void loanGetViaRSA(){
        //入参
        String partnerPublicKey = "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAkKna17e0o5kR9Sjd1OsUfWPADhqbnUU8VScqCc0D3fsPCIMKgk6dZrL7O1Z7WGdowM1VHHftjpJKbyk33s4DnuqrgiUAeq1sBFB3YIQw307LmH79bP7mWd5iNk9NDAJXKV1spqhBpaBONhi63CcQ7OWpo_puWW8xbHjCfaF1nR7NeKSR3mbTn71AhAmRw243oIrmUVe9XPhU2syLxvJ9z2b_hDPDMY1X1hyoObrIU_zjP24bi6XuXQhGHMCH8OSrv7MbnXWbx72wjaL4jHzNpzxJQ9DMQEVvQTXkywHisSUf0FND3l7_Y1kGEjT9IujQlRUAcV3lviFqGUXrkYOhSwIDAQAB";
        String partnerPrivateKey = "MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCQqdrXt7SjmRH1KN3U6xR9Y8AOGpudRTxVJyoJzQPd-w8IgwqCTp1msvs7VntYZ2jAzVUcd-2OkkpvKTfezgOe6quCJQB6rWwEUHdghDDfTsuYfv1s_uZZ3mI2T00MAlcpXWymqEGloE42GLrcJxDs5amj-m5ZbzFseMJ9oXWdHs14pJHeZtOfvUCECZHDbjegiuZRV71c-FTazIvG8n3PZv-EM8MxjVfWHKg5ushT_OM_bhuLpe5dCEYcwIfw5Ku_sxuddZvHvbCNoviMfM2nPElD0MxARW9BNeTLAeKxJR_QU0PeXv9jWQYSNP0i6NCVFQBxXeW-IWoZReuRg6FLAgMBAAECggEAPY55V9eM3xxwXsC__Cz38A81FwtNclOWw6lBoyAA6EE_eWDBZQdsxNmeO_alz81Y7smw0MdbZ5JqZ_jDFGTXd5Tl3CBAnvMShpdy5Lf7T9pomgBXeDzS6iTN58xAvb51Nl3RsOzh2kdnYG-Pe8SH2DY1xFf5Asdk4YJVSD4fHPboYKbJYDbeXKovxO8OOdEhYmIdFSgJ6s5qcYihDBUd4TlVfT0kSqtAzI2PEzIcX7MDSv4F7SL59LnzAbUmdW_nLVbOYL7d4KmAOZqm7K7dP9TcJPb-FNjNSBDhbQj25DjWxZQB1xB9bP0Kl5Sj5dxNw9Ne1o3DrQ40mOi4wV51SQKBgQD4Jsjv1kI4fHNY10Ma2AINbw98Rr-5ieOzX4NIM7AEGkv_INzGiVnOsmyJTolhcOhuUGXTxeqQmwhzdrZ6AUVw6s45eqaoYnyndfRAuvc_DsTVc4btsvJfG4N0ZobKP6EfdRmHntvBKx2m8cKDtG4ITRLkYayFdjLikxEwr3u0jwKBgQCVPSffLdxo8kgE5LgdaFSIrWWk9vdPlBp3h6aeRnyTTEKDs4nwkZ93_j1nJgHFdcx8hCqKXwJ5Ehz7DXC2N3XqI1YlyWviezV6o0XzveWib6bZNRB1Mh0vXovzzbmQvo5NIhw1fIdJcTnE2k0nVMFz46SiPEiHwZgYN4NNzBt9hQKBgHy2uVvYGbXbzfjDTuVp1DY-L9EsmWS9CSP4B7m8yGR3duRE9tAM7Ya1I1kqkF7ZaOcwHsz89fMxB2FIM1ND2ktypqw6mRGdVbqvzE7P6DzXxlLkWdaSjb8Ay-MvN-Tjb62oo2kGjLkbWy6w6Cpa_sXLPohrElKM4ev_L6-BMjG_AoGAdWuEr4h53uih2ZfLdPfdaxxi2QSnWSmCGYHVirqS0aIyw0TDx1AMVHDpBvtUcXRZy66BehV-8JtbyfutLvE8CVh8M4bjJ3MhhLhqFXjX8JJAiK3DoTIo3FhbbRv0YPpNJEsuPrcYCqTXexb3lXaOLwxxQGSF_KpJbORgnxl0l7ECgYEA2-34UXEo06DOYgRKF6ru1kqiC511DboLTu1kk5DPT08X2hAZ9tDZ425JNBnBdsiiBxicr85HSJnfUBGLlzBxdCXhhBdHa87mbwYqAHJ4YIP-G545xcZM1hFtlqf_vktYGbZcNs-D4SSdj9D2MsHXW_V7B2mwiqdOa_VmlJQX7m4";
        String jadyerPublicKey = "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAl0Oc-htdurUaW537t7lDSKdRoHLrzFESz_0P8UL4oImLH_W4JKw90bi1yhZNIK1-FLFk-xosEgjxm7sV_KYytS6BIxx1efuy6yMErlP06nnQrUz4aZcKSuQK-jddJZ7_RQUhgqB9h6bjI3koRUP2YY4GUNX3y4t45J-jqDHLtiGdcv8wYDqAertBZXKIanJ78dXC0ip29SGiqZ_qlMolma5AK0w5M_2r7cczTT7QCYqhycvF27wArOYXzCEp-3hcSac8meWpoo9aIJFhETfmcaqyiuR9KRVMpUCQqC0bihl1IuOSOKft9VCKVoleECUFoXTsfb1mEeh5p6lfDKyL1wIDAQAB";
        String jadyerPrivateKey = "MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCXQ5z6G126tRpbnfu3uUNIp1GgcuvMURLP_Q_xQvigiYsf9bgkrD3RuLXKFk0grX4UsWT7GiwSCPGbuxX8pjK1LoEjHHV5-7LrIwSuU_TqedCtTPhplwpK5Ar6N10lnv9FBSGCoH2HpuMjeShFQ_ZhjgZQ1ffLi3jkn6OoMcu2IZ1y_zBgOoB6u0Flcohqcnvx1cLSKnb1IaKpn-qUyiWZrkArTDkz_avtxzNNPtAJiqHJy8XbvACs5hfMISn7eFxJpzyZ5amij1ogkWERN-ZxqrKK5H0pFUylQJCoLRuKGXUi45I4p-31UIpWiV4QJQWhdOx9vWYR6HmnqV8MrIvXAgMBAAECggEAe3vx4WeHy8zemJ5PCLwQBna5N0-52VDyF6MSabVvfLbsQYn56s5FpTiyByjPi_a177SlqCvEgHCWtLg1CcyvpqMxPvWTnaJxfG1Y--uEDAqn5WHphWGNQHgL0hpySy0SXUkEAzx7XctKsAHPc0Q5FYi49TLHmH3iklkUZFFKaQKasrEtSV95KQU8J6A8JNEKgdNexLITGxu7Br7h0u8UrFwrR2DZrqQne25sOaGZNQo2Ge5Kb59Uk780V9igCrApgGeo2jH7wU6zt4rM2aHriSFAaMACiDjBkYpTPBsl_h0YRX6Be4kUF683C_Nwuxu3eUKM1Q8DO-N4M_rSaQKdqQKBgQD82PvI5gffhH38iIHJmXTI0blwTox_KHrtD1ws5KOTtCxzS0Aj3Cf9d7pZQ62RJx6-KM_geBZQ1sG1umqNiEj7Loz-Q0gR6XpcrnYLJTGQLgB7sdGweLJ9kvAeEc0JIizfRGUg6vNsAzRUr-RQEl2h_qan81XPjsOZ6S57PuYU9QKBgQCZJmeQIyQzFlqknFd0oVFOQ5KR8-lD11FSOLbRA_H-oyjZg7Eu6VxCAKMrAhbdyPkY7YR54tKrVphohhuJNoGM7H3RNpridm4dUTGAoWPc6auh_1sajHk2ij_tHR4rD8QER3jffcgbyvaGSA7jzfSzMNZm11Gb9nto1fICbuE-GwKBgBijRBWVZJsBHA2pd4wfaePPm9Q3szUIysGix4aQWOghnFs3r-5Om471RbFBCP6l4zcAXxEuYm5KHuIIYi2cZBAlvxNflvw31faGAXagjy3Pbbif4SDjAfF-ietELMiBDgJLddc5TbLutQCzivnKcFlCqRagfXIWJTUwJZlYza6pAoGAQdwBFzv1ej63tihBd7dTtptacYd5naH_p6MaAyJ2M7HIhFmcnXbfJMcPZBRe7vtZG74whRXk0KfJnNFnEAeviIG-zXR1AMQ7MEJVTmKZBkw6cczVScJ08d5cBUTLT2tVOR3fPgTiRAlxIGfmd1J_U3vCB7G6t540je3LR_6UwFcCgYEAhrQypdoINiujxn-mXavBtA69Z3uK0XneQfRbsE9kQbmsTbdpJw-1-Ddsg28pAf-s_eTOYa-RoQ5-Y_rqGH508ijn1APIC4NKlSIp_a6Q9NoDpsEU2v6sdpKr9XQgysDpcosy4WoGrFgMg4qSYt6tlr-o8R106skWtWNEdSrSqJM";
        String appid = "970";
        String applyNo = RandomStringUtils.randomNumeric(16);
        String partnerApplyNo = RandomStringUtils.randomNumeric(16);
        String reqURL = "http://127.0.0.1/open/router/rest";
        //调用
        Map<String, String> dataMap = new HashMap<>();
        dataMap.put("applyNo", applyNo);
        dataMap.put("partnerApplyNo", partnerApplyNo);
        Map<String, String> paramMap = new HashMap<>();
        paramMap.put("appid", appid);
        paramMap.put("version", SeedConstants.OPEN_VERSION_22);
        paramMap.put("method", SeedConstants.OPEN_METHOD_boot_loan_get);
        paramMap.put("timestamp", DateFormatUtils.format(new Date(), "yyyy-MM-dd HH:mm:ss"));
        paramMap.put("data", CodecUtil.rsaEncrypt(JSON.toJSONString(dataMap), jadyerPublicKey));
        paramMap.put("sign", CodecUtil.rsaSign(JSON.toJSONString(dataMap), partnerPrivateKey));
        String respData = HTTPUtil.post(reqURL, JSON.toJSONString(paramMap), "application/json; charset=UTF-8");
        Map<String, String> respMap = JSON.parseObject(respData, new TypeReference<Map<String, String>>(){});
        if("0".equals(respMap.get("code"))){
            String dataPlain = CodecUtil.rsaDecrypt(respMap.get("data"), partnerPrivateKey);
            boolean verifyResult = CodecUtil.rsaVerify(dataPlain, jadyerPublicKey, respMap.get("sign"));
            System.out.println("服务端返回内容验签-->" + (verifyResult ? "通过" : "未通过"));
            System.out.println("服务端返回内容明文-->" + dataPlain);
        }
    }
}